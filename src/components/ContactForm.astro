---
import { type Contact } from '@/data/contacts';
import { Icon } from 'astro-icon/components';
interface Props {
  contact?: Contact;
}
const { contact, ...props } = Astro.props;
const regex = /\/edit$/;
const isEdit = regex.test(Astro.url.pathname);

// console.log(isEdit);
// console.log(contact);
---

<template id="deletePop">
  <swal-icon type="warning" color="red"></swal-icon>
  <swal-title>Delete Contact</swal-title>
  <swal-html>
    Are you sure you want to delete <strong
      >{contact?.first}&nbsp;{contact?.last}</strong
    >?
  </swal-html>
  <swal-button type="confirm"
    ><Icon name="mdi:thumbs-up" />
    Yes</swal-button
  >
  <swal-button type="cancel">No</swal-button>
</template>

<form id="contactForm" {...props}>
  <label for="first">
    FirstName
    <input
      type="text"
      id="first"
      name="first"
      required
      value={isEdit ? contact?.first : ''}
      autofocus
    />
  </label>
  <label for="last">
    LastName
    <input
      type="text"
      id="last"
      name="last"
      required
      value={isEdit ? contact?.last : ''}
    />
  </label>
  <label for="phone">
    Phone
    <input
      type="text"
      id="phone"
      name="phone"
      required
      value={isEdit ? contact?.phone : ''}
    />
  </label>

  <label for="email">
    Email
    <input
      type="text"
      id="email"
      name="email"
      required
      value={isEdit ? contact?.email : ''}
    />
  </label>

  <p class="error">Invalid email</p>

  <div class="actions">
    <a href="/contacts">&larr; Back</a>
    {
      contact && contact.id && (
        <button
          type="button"
          style="background-color:orangered;cursor:pointer;"
          hx-delete={`/api/${contact?.id}/delete`}
          hx-swap="none"
          confirm-with-sweet-alert
        >
          Delete
        </button>
      )
    }

    <button id="save">Save</button>
  </div>
</form>

<script>
  import Swal from 'sweetalert2';

  const save = document.getElementById('save') as HTMLButtonElement;
  const email = document.getElementById('email') as HTMLInputElement;
  const error = document.querySelector('.error') as HTMLParagraphElement;

  function checkEmail(e: Event) {
    console.log('ciao email');
    if (!email.value.includes('@')) {
      error.classList.add('show');
      email?.addEventListener('input', () => {
        if (email.value.includes('@')) {
          error.classList.remove('show');
        } else {
          error.classList.add('show');
        }
      });
    }
  }

  save?.addEventListener('click', checkEmail);

  document.addEventListener('htmx:confirm', function (e) {
    interface ConfirmEvent extends Event {
      detail: {
        issueRequest: (confirmed: boolean) => void;
      };
    }
    const customEvent = e as ConfirmEvent;
    // The event is triggered on every trigger for a request, so we need to check if the element
    // that triggered the request has a confirm question set via the hx-confirm attribute,
    // if not we can return early and let the default behavior happen
    const target = e.target as HTMLButtonElement;
    if (!target.hasAttribute('confirm-with-sweet-alert')) return;

    // This will prevent the request from being issued to later manually issue it
    e.preventDefault();

    Swal.fire({
      template: '#deletePop',
      reverseButtons: true,
    }).then(function (result) {
      if (result.isConfirmed) {
        // If the user confirms, we manually issue the request
        customEvent.detail.issueRequest(true); // true to skip the built-in window.confirm()
      }
    });
  });
</script>
