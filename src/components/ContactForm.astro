---
import { type Contact } from '@/data/contacts';
interface Props {
  action: string;
  contact?: Contact;
  method?: string;
}
const { action, contact, method } = Astro.props;
const regex = /\/edit$/;
const isEdit = regex.test(Astro.url.pathname);
// console.log(isEdit);
// console.log(contact);
---

<form id="contactForm" action={action} method={method}>
  <label for="first">
    FirstName
    <input
      type="text"
      id="first"
      name="first"
      required
      value={isEdit ? contact?.first : ''}
      autofocus
    />
  </label>
  <label for="last">
    LastName
    <input
      type="text"
      id="last"
      name="last"
      required
      value={isEdit ? contact?.last : ''}
    />
  </label>
  <label for="phone">
    Phone
    <input
      type="text"
      id="phone"
      name="phone"
      required
      value={isEdit ? contact?.phone : ''}
    />
  </label>

  <label for="email">
    Email
    <input
      type="text"
      id="email"
      name="email"
      required
      value={isEdit ? contact?.email : ''}
    />
  </label>

  <div class="actions">
    {
      contact ? (
        <button
          type="button"
          style="background-color:orangered;cursor:pointer;"
          hx-confirm="Are you sure to delete this contact?"
          hx-delete={`/api/${contact?.id}/delete`}
          hx-swap="none"
        >
          Delete
        </button>
      ) : (
        <a href="/contacts">Cancel</a>
      )
    }
    {
      contact ? (
        <button hx-put={`/api/${contact.id}/update`}>Save</button>
      ) : (
        <button>Save</button>
      )
    }
  </div>
</form>
<div class="error">
  <p>Invalid email</p>
</div>

<style></style>

<script>
  const form = document.querySelector('form')!;
  const error = document.querySelector('.error') as HTMLDivElement;

  form?.addEventListener('submit', (e) => {
    if (!form.email.value.includes('@')) {
      error.style.display = 'block';
    }
  });
</script>
